{"ast":null,"code":"\"use client\";\n\nimport _objectSpread from \"/Users/sairahulpadma/Desktop/UNT/SPRING-2024/SE/partpro-del3/partpro-management-system/src/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/sairahulpadma/Desktop/UNT/SPRING-2024/SE/partpro-del3/partpro-management-system/src/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Toast = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      _ref$transition = _ref.transition,\n      Transition = _ref$transition === void 0 ? ToastFade : _ref$transition,\n      _ref$show = _ref.show,\n      show = _ref$show === void 0 ? true : _ref$show,\n      _ref$animation = _ref.animation,\n      animation = _ref$animation === void 0 ? true : _ref$animation,\n      _ref$delay = _ref.delay,\n      delay = _ref$delay === void 0 ? 5000 : _ref$delay,\n      _ref$autohide = _ref.autohide,\n      autohide = _ref$autohide === void 0 ? false : _ref$autohide,\n      onClose = _ref.onClose,\n      onEntered = _ref.onEntered,\n      onExit = _ref.onExit,\n      onExiting = _ref.onExiting,\n      onEnter = _ref.onEnter,\n      onEntering = _ref.onEntering,\n      onExited = _ref.onExited,\n      bg = _ref.bg,\n      props = _objectWithoutProperties(_ref, [\"bsPrefix\", \"className\", \"transition\", \"show\", \"animation\", \"delay\", \"autohide\", \"onClose\", \"onEntered\", \"onExit\", \"onExiting\", \"onEnter\", \"onEntering\", \"onExited\", \"bg\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast'); // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n\n  var delayRef = useRef(delay);\n  var onCloseRef = useRef(onClose);\n  useEffect(function () {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  var autohideTimeout = useTimeout();\n  var autohideToast = !!(autohide && show);\n  var autohideFunc = useCallback(function () {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(function () {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  var toastContext = useMemo(function () {\n    return {\n      onClose: onClose\n    };\n  }, [onClose]);\n  var hasAnimation = !!(Transition && animation);\n\n  var toast = /*#__PURE__*/_jsx(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && \"bg-\".concat(bg), !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  }));\n\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n});\nToast.displayName = 'Toast';\nexport default Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});","map":{"version":3,"sources":["/Users/sairahulpadma/Desktop/UNT/SPRING-2024/SE/partpro-del3/partpro-management-system/src/frontend/node_modules/react-bootstrap/esm/Toast.js"],"names":["React","useEffect","useMemo","useRef","useCallback","classNames","useTimeout","ToastFade","ToastHeader","ToastBody","useBootstrapPrefix","ToastContext","jsx","_jsx","Toast","forwardRef","ref","bsPrefix","className","transition","Transition","show","animation","delay","autohide","onClose","onEntered","onExit","onExiting","onEnter","onEntering","onExited","bg","props","delayRef","onCloseRef","current","autohideTimeout","autohideToast","autohideFunc","set","toastContext","hasAnimation","toast","role","Provider","value","children","in","unmountOnExit","displayName","Object","assign","Body","Header"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Toast = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  transition: Transition = ToastFade,\n  show = true,\n  animation = true,\n  delay = 5000,\n  autohide = false,\n  onClose,\n  onEntered,\n  onExit,\n  onExiting,\n  onEnter,\n  onEntering,\n  onExited,\n  bg,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast');\n\n  // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n  const delayRef = useRef(delay);\n  const onCloseRef = useRef(onClose);\n  useEffect(() => {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  const autohideTimeout = useTimeout();\n  const autohideToast = !!(autohide && show);\n  const autohideFunc = useCallback(() => {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(() => {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  const toastContext = useMemo(() => ({\n    onClose\n  }), [onClose]);\n  const hasAnimation = !!(Transition && animation);\n  const toast = /*#__PURE__*/_jsx(\"div\", {\n    ...props,\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  });\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n});\nToast.displayName = 'Toast';\nexport default Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});"]},"metadata":{},"sourceType":"module"}